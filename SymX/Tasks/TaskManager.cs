
using System.Diagnostics;
using System.Net.Http.Headers;

namespace SymX
{
    /// <summary>
    /// TaskManager
    /// 
    /// SymX's state machine - handles all of the tasks that SymX must perform
    /// </summary>
    public static class TaskManager
    {
        /// <summary>
        /// The list of tasks that need to run in this session.
        /// </summary>
        public static List<Tasks> TaskList { get; set; }

        /// <summary>
        /// Private: List of generated URLs
        /// </summary>
        private static List<string> UrlList { get; set; }

        /// <summary>
        /// Private: Timer used for measuring how long a download took
        /// </summary>
        private static Stopwatch timer = new Stopwatch();

        /// <summary>
        /// Magic number for how much Microsoft pads their SizeOfImage values to.
        /// </summary>
        private static ulong IMAGESIZE_PADDING = 0x1000;

        /// <summary>
        /// Default filename used for logging successful URLs.
        /// </summary>
        private static string DEFAULT_TEMP_FILE_NAME = "SuccessfulURLs.log";

        /// <summary>
        /// Default value for length of the progress bar.
        /// </summary>
        private static uint PROGRESS_BAR_LENGTH = 50;

        static TaskManager()
        {
            TaskList = new List<Tasks>();
            UrlList = new List<string>();
        }

        #region Task manager
        public static void GenerateListOfTasks()
        {
            if (Configuration.Verbosity == Verbosity.Verbose) Logger.Log("Initialising task list...");

            if (!Configuration.KeepOldLogs) TaskList.Add(Tasks.ClearLogs);

            switch (Configuration.SearchMode)
            {
                case SearchMode.Bruteforce:
                    TaskList.Add(Tasks.GenerateListOfUrls);
                    TaskList.Add(Tasks.TryDownload);
                    break;
                case SearchMode.CsvImport:
                    TaskList.Add(Tasks.ParseCsv);
                    TaskList.Add(Tasks.TryDownload);
                    break;
                case SearchMode.CsvExport:
                    TaskList.Add(Tasks.GenerateCsv);
                    break;
                case SearchMode.Parse000Admin:
                    TaskList.Add(Tasks.Parse000Admin);
                    break;
            }

            TaskList.Add(Tasks.Exit);
        }

        public static bool Run()
        {
            int numTasks = TaskList.Count;
            int curTask = 1;

            // delete temp file
            if (File.Exists(DEFAULT_TEMP_FILE_NAME) && !Configuration.DontGenerateTempFile) File.Delete(DEFAULT_TEMP_FILE_NAME);

            // perform each task in sequence
            for (int i = 0; i < TaskList.Count; i++)
            {
                Tasks currentTask = TaskList[i];

                // set window title
                string taskString = $"Performing task {curTask}/{numTasks} ({currentTask})...";

                Console.Title = $"{SymXVersion.SYMX_APPLICATION_NAME} - {taskString}";

                if (Configuration.Verbosity >= Verbosity.Normal) Logger.Log(taskString);
                curTask++;

                // perform the current task
                switch (currentTask)
                {
                    // Clear all old log files
                    case Tasks.ClearLogs:
                        ClearLogs();
                        continue; 
                    // Generate a list of URLs from comman-dline options or CSV.
                    case Tasks.GenerateListOfUrls:
                        UrlList = GenerateUrlList();
                        continue;
                    // Try and download the URL list generated by GenerateListOfUrls.
                    case Tasks.TryDownload:
                        List<string> successfulUrls = ScanForFiles();
                        if (successfulUrls.Count > 0)
                        {
                            if (!DownloadSuccessfulFiles(successfulUrls)) Logger.Log("An error occurred downloading files!\n", ConsoleColor.Red);
                        }
                        continue;
                    // Generate a CSV file from a folder.
                    case Tasks.GenerateCsv:
                        if (!CSVFile.Run()) Logger.Log("MassView failed to generate CSV file!", ConsoleColor.Red);
                        continue;
                    case Tasks.ParseCsv:
                        UrlList = CSVFile.ParseUrls(Configuration.InFile);
                        continue;
                    case Tasks.Parse000Admin:
                        AdminParser.Parse000Admin();
                        continue;
                    // Exit the program.
                    case Tasks.Exit:
                        Environment.Exit(0);
                        continue;
                }

            }

            return (TaskList.Count > 0);  // if there are no remaining tasks return false.
        }

        /// <summary>
        /// Clears old log files. Not called if -keeplogs [-k] is provided.
        /// </summary>
        private static void ClearLogs()
        {
            // Logs are only created in the current directory currently.
            // If anyone requests a feature to change logging dir then we will change this code

            // Get the current directory
            string currentDirectory = AppDomain.CurrentDomain.BaseDirectory;

            foreach (string fileName in Directory.GetFiles(currentDirectory))
            {
                try
                {
                    // only delete nucore-*.log files
                    if (fileName.Contains("NuCore")
                        && fileName.Contains(".log"))
                    {
                        File.Delete(fileName);
                    }
                }
                catch
                {
                    // don't delete the current file.s
                    continue; 
                }
            }
        }
        #endregion
        private static List<string> GenerateUrlList()
        {
            List<string> urlList = new List<string>();

            if (Configuration.ImageSizeMin == 0
                    && Configuration.ImageSizeMax == 0)
            {
                for (ulong curTime = Configuration.Start; curTime < Configuration.End; curTime++)
                {
                    string fileUrl = $"{Configuration.SymbolServerUrl}/{Configuration.FileName}/{curTime.ToString("x")}{Configuration.ImageSize}/{Configuration.FileName}";
                    if (Configuration.Verbosity >= Verbosity.Verbose) Console.WriteLine(fileUrl);
                    urlList.Add(fileUrl);
                }
            }
            else
            {
                ulong imageSizeMin = Configuration.ImageSizeMin;
                ulong imageSizeMax = Configuration.ImageSizeMax;

                for (ulong curTime = Configuration.Start; curTime < Configuration.End; curTime++)
                {
                    for (ulong curImageSize = imageSizeMin; curImageSize <= imageSizeMax; curImageSize += IMAGESIZE_PADDING)
                    {
                        string fileUrl = $"{Configuration.SymbolServerUrl}/{Configuration.FileName}/{curTime.ToString("x")}{curImageSize.ToString("x")}/{Configuration.FileName}";
                        if (Configuration.Verbosity >= Verbosity.Verbose) Console.WriteLine(fileUrl);
                        urlList.Add(fileUrl);
                    }
                }
            }

            return urlList;
        }

        /// <summary>
        /// Tries to scan for valid files by checking every URL in the generated file list by sending a HEAD request to it. 
        /// </summary>
        /// <returns>A list of the URLs that resolved with a success code, not necessarily 200 OK.</returns>
        private static List<string> ScanForFiles()
        {
            StreamWriter tempFile = null;

            // create a temporary file if the user has not explicitly specified to do this
            if (!Configuration.DontGenerateTempFile)
            {
                try
                {
                    tempFile = new StreamWriter(new FileStream(DEFAULT_TEMP_FILE_NAME, FileMode.OpenOrCreate));
                }
                catch
                {
                    Logger.Log("Warning: Failed to create temp file - another instance of SymX is likely running!", ConsoleColor.Yellow);
                    // don't run temp file commands to prevent crashing
                    Configuration.DontGenerateTempFile = true;
                }
            }

            if (Configuration.Verbosity >= Verbosity.Quiet) Logger.Log($"Trying {UrlList.Count} URLs...");

            timer = Stopwatch.StartNew();

            List<string> successfulUrls = new List<string>();

            int noDownloadsAtOnce = Configuration.NumThreads;
            int failedUrls = 0; // The number of failed URLs

            // create a list of tasks
            // consider having it return the url instead
            List<Task<bool>> tasks = new List<Task<bool>>();

            // set up some temporary variables to use later
            // calculate download information
            long timeElapsedMs = 0;
            double timeElapsed = 0;
            int numSuccessfulUrls = 0;
            double urlsPerSecond = 0;
            double percentageCompletion = 0;

            for (int curUrlSet = 0; curUrlSet < UrlList.Count; curUrlSet += noDownloadsAtOnce)
            {
                percentageCompletion = ((curUrlSet / (double)UrlList.Count)) * 100;
                string percentageCompletionString = percentageCompletion.ToString("F1");

                // Performance improvement: don't dump to the console so often (only dump it every time a set of threads complets)
                // we should allow the user to control this in future
                if (curUrlSet % noDownloadsAtOnce == 0 && Configuration.Verbosity >= Verbosity.Normal)
                {
                    string reportString = $"{percentageCompletionString}% complete ({curUrlSet}/{UrlList.Count} URLs scanned, {failedUrls} failed), {successfulUrls.Count} files found";
                    ScanDrawDownloadUi(reportString, percentageCompletion, successfulUrls);
                }

                // Set up a batch of downloads (default 12, ~numdownloads)
                for (int curUrlInUrlSet = 0; curUrlInUrlSet < noDownloadsAtOnce; curUrlInUrlSet++)
                {
                    int curUrlId = curUrlSet + curUrlInUrlSet;

                    if (curUrlId < UrlList.Count)
                    {
                        string curUrl = UrlList[curUrlSet + curUrlInUrlSet];
                      
                        if (Configuration.Verbosity >= Verbosity.Verbose) Logger.Log($"Trying URL {curUrl}...");
                        Task<bool> worker = Task<bool>.Run(() => CheckFileExists(curUrl));
                        tasks.Add(worker);
                    }
                }

                // wait for all current downloads to complete
                bool waiting = true;

                while (waiting)
                {
                    // will exit if all tasks complete
                    bool needToWait = false;

                    for (int curTask = 0; curTask < tasks.Count; curTask++)
                    {
                        Task<bool> task = tasks[curTask];

                        // we need to wait as not every task is done
                        if (!task.IsCompleted) needToWait = true;
                    }

                    waiting = needToWait;
                }

                for (int curTask = 0; curTask < tasks.Count; curTask++)
                {
                    Task<bool> task = tasks[curTask];

                    string foundUrl = UrlList[curUrlSet + curTask];
                    // it was successful so...
                    // get the current url 
                    if (task.Result) // get the current url
                    {
                        // If we haven't specified we don't want a temporary file, write it to successful_urls.log
                        if (!Configuration.DontGenerateTempFile) tempFile.WriteLine(foundUrl);

                        if (Configuration.Verbosity >= Verbosity.Verbose) Logger.Log($"Found a valid link at {foundUrl}!", ConsoleColor.Green);
                        successfulUrls.Add(foundUrl); // add it
                    }
                    else
                    {
                        
                        // if the task caused an exception then fail checking the URL
                        if (task.IsFaulted)
                        {
                            Logger.Log($"An error occurred while scanning for the URL {foundUrl}!", ConsoleColor.Red);
                            failedUrls++;
                        }
                        else
                        {
                            if (Configuration.Verbosity >= Verbosity.Verbose) Logger.Log($"URL not found: {foundUrl}", ConsoleColor.Yellow);
                        }
                    }
                }

                tasks.Clear();
            }

            timeElapsedMs = timer.ElapsedMilliseconds;
            timeElapsed = timeElapsedMs / 1000;
            numSuccessfulUrls = successfulUrls.Count;
            urlsPerSecond = (double)(UrlList.Count / (timeElapsedMs / (double)1000));

            if (Configuration.Verbosity >= Verbosity.Normal) Logger.Log($"Took {timeElapsed} seconds to check {UrlList.Count} URLs, found {numSuccessfulUrls} files ({urlsPerSecond.ToString("F1")} URLs per second)");

            // close successfulurls.log (it is deleted later)
            if (!Configuration.DontGenerateTempFile) tempFile.Close();

            return successfulUrls;
        }

        private static void ScanDrawDownloadUi(string reportString, double percentageCompletion, List<string> successfulUrls)
        {
            // don't log this (nucore will allow optional logging)
            if (Configuration.Verbosity < Verbosity.Verbose)
            {
                // the reason that there is an empty catch block here
                // is that console.clear throws an exception if the console is piped to a file
                // so for some reason if someone was piping symx to a file...
                try
                {
                    // clear the *ENTIRE* console, not just visible stuff. this fixes display issues
                    // BUT will cause garbage to be printed <Win10 1507. The Console class is a wrapper for Console that adds VTS functionality.
                    Logger.ClearEntireConsole();
                }
                catch { };

                // draw it last so we draw over the top of the successful urls if necessary so the user can always see the progress

                Console.SetCursorPosition(0, 0);

                // clear current line 
                Logger.ClearCurrentLine();

                Logger.Log(reportString, ConsoleColor.White, false, false);

                // clear current line again
                Logger.ClearCurrentLine();

                int numberOfBarsToDraw = (int)(PROGRESS_BAR_LENGTH * (percentageCompletion / 100));

                for (int curPercent = 0; curPercent < numberOfBarsToDraw; curPercent++)
                {
                    // large box character dec:219 hex:DB
                    Console.Write("█");
                }

                // draw spaces as placeholders for the areas of the bar that are not yet completed
                for (int curBar = numberOfBarsToDraw; curBar < (PROGRESS_BAR_LENGTH - 1); curBar++) Console.Write(" ");

                Logger.Log("█\n\n", ConsoleColor.White, false, false);

                // start at (0, 2) so that this is always visible
                Console.SetCursorPosition(0, 4);

                // clear current line again. this will be in nucore later on
                Logger.ClearCurrentLine();

                Logger.Log("Latest valid links: ", ConsoleColor.White, false, false);

                if (!Configuration.DontGenerateTempFile) Logger.Log("SuccessfulURLs.log contains all successfully resolved URLs", ConsoleColor.White, false, false);

                foreach (string successfulUrl in successfulUrls) Logger.Log(successfulUrl, ConsoleColor.White, false, false);
            }
            else
            {
                Logger.Log(reportString);
            }
            
        }

        /// <summary>
        /// Try and download a file.
        /// </summary>
        /// <param name="fileName">A URI to try and download.</param>
        /// <returns>A boolean determining if the file downloaded successfully. It will return false and <see cref="Task.IsFaulted"/> will be true if an exception occurred.</returns>
        private static bool CheckFileExists(string fileName)
        {
            try
            {
                HttpRequestMessage headRequest = new HttpRequestMessage(HttpMethod.Head, fileName);
                HttpResponseMessage responseMsg = HttpManager.Client.Send(headRequest);

                return responseMsg.IsSuccessStatusCode;
            }
            catch
            {
                return false;
            }
        }

        #region Successful download task
        private static bool DownloadSuccessfulFiles(List<string> urlList)
        {
            try
            {
                return FileDownloader.DownloadListOfFiles(urlList);
            }
            catch (Exception ex)
            {
                Logger.Log($"A fatal error occurred while downloading files: {ex}", ConsoleColor.Red);
                return false;
            }
        }

        #endregion
    }
}
